---
import { wretch } from "@utils/wretch";
import { XMLParser } from "fast-xml-parser";
import osisToEnOriginal from "bible-reference-formatter";

interface Header {
  revisionDesc: { date: string; p: string };
  work: {
    title: string;
    creator: string[];
    identifier: { "#text": string; "@_type": "OSIS" };
    language: { "#text": string; "@_type": "IETF" };
    [key: string]: unknown;
  };
}

export interface Verse {
  "#text": string;
  "@_osisID": string;
}

export interface Chapter {
  verse: Verse[];
  "@_osisID": string;
}

interface Book {
  chapter: Chapter | Chapter[];
  "@_type": "book";
  "@_osisID": string;
}

interface Osis {
  osisText: {
    header: Header;
    div: Book[];
    // | {
    //     titlePage: { p: string[] };
    //     div: { title: string; p: string | unknown[]; "@_type": string }[];
    //   };
  };
}

interface BibleFile {
  "?xml": "";
  osis: Osis;
}

interface Index {
  "?xml": unknown;
  "?xml-model": unknown;
  bibles: { language: Language[] };
}

interface Language {
  "@_title": string;
  "@_id": string;
  bible: IndexBible | IndexBible[];
}
interface IndexBible {
  "@_title": string;
  "@_id": string;
}

interface S3Index {
  "?xml": { "@_version": "1.0"; "@_encoding": "UTF-8" };
  ListBucketResult: {
    Name: "bible-driveway";
    Prefix: "";
    KeyCount: number;
    MaxKeys: 1000;
    IsTruncated: boolean;
    Contents: {
      Key: string;
      LastModified: string;
      ETag: string;
      Size: number;
      StorageClass: "STANDARD" | string;
    }[];
    "@_xmlns": "http://s3.amazonaws.com/doc/2006-03-01/";
  };
}

export async function loadXmlFile<Result extends any>(
  path: string
): Promise<Result> {
  const parser = new XMLParser({ ignoreAttributes: false });
  console.log(path);
  const text = await wretch.get(path).text();
  return parser.parse(text) as Result;
}

export function loadS3Index() {
  return loadXmlFile<S3Index>("/?list-type=2");
}

export function loadBibleIndex() {
  return loadXmlFile<Index>("/index.xml");
}

export async function getBibleIndex() {
  const problemBibles = ["bible.en.leb.2010", "bwe", "bzy2000"];
  const indexPromise = loadBibleIndex();
  const s3Index = await loadS3Index();
  const index = await indexPromise;
  return index.bibles.language
    .flatMap((language) => {
      const bibles = Array.isArray(language.bible)
        ? language.bible
        : [language.bible];
      return bibles.map((bible) => {
        return {
          language: language["@_id"],
          id: bible["@_id"],
          title: bible["@_title"],
        };
      });
    })
    .filter(({ id, language }) => {
      return s3Index.ListBucketResult.Contents.some(({ Key: path }) => {
        if (problemBibles.includes(id)) return false;
        return path.includes(id) && path.includes(language);
      });
    });
}

export function loadBible(language: string, identifier: string) {
  return loadXmlFile<BibleFile>(`/${language}/${identifier}.xml`);
}

export function getNameFromBible(bible: Osis): string {
  return bible.osisText.header.work.identifier["#text"];
}

export async function findBook(
  language: string,
  versionIdentifier: string,
  bookShortName: string
): Promise<Book> {
  const bible = await loadBible(language, versionIdentifier);
  if (!Array.isArray(bible.osis.osisText.div)) {
    throw new Error(`Really not sure how to find ${bookShortName}`);
  }
  const book = bible.osis.osisText.div.find(
    (book) => book["@_osisID"] === bookShortName
  );
  if (!book) throw new Error(`Unable to find book of name ${bookShortName}`);
  return book;
}

export async function findChapter({
  language,
  versionIdentifier,
  bookShortName,
  chapterNumber,
}: {
  language: string;
  versionIdentifier: string;
  bookShortName: string;
  chapterNumber: string;
}): Promise<Chapter> {
  const book = await findBook(language, versionIdentifier, bookShortName);
  if (!Array.isArray(book.chapter)) {
    if (chapterNumber === "1") return book.chapter;
    throw new Error(
      `There is not a chapter ${chapterNumber} in ${bookShortName}`
    );
  }
  const chapter = book.chapter.find((chapter) => {
    return chapter["@_osisID"].split(".")[1] === chapterNumber;
  });
  if (!chapter) {
    throw new Error(
      `There is not a chapter ${chapterNumber} in ${bookShortName}`
    );
  }
  return chapter;
}

export async function findVerse({
  language,
  versionIdentifier,
  bookShortName,
  chapterNumber,
  verseNumber,
}: {
  language: string;
  versionIdentifier: string;
  bookShortName: string;
  chapterNumber: string;
  verseNumber: string;
}): Promise<Verse> {
  const chapter = await findChapter({
    language,
    versionIdentifier,
    bookShortName,
    chapterNumber,
  });
  const verse = chapter.verse.find((verse) => {
    const currentVerseNumber = verse["@_osisID"].split(".")[2];
    if (!currentVerseNumber)
      throw new Error(
        `Unable to parse verse number from verse ID ${verse["@_osisID"]}`
      );
    return currentVerseNumber === verseNumber;
  });
  if (!verse) {
    throw new Error(
      `Unable to find verse number for book ${bookShortName}, chapter ${chapterNumber}, verse ${verseNumber}`
    );
  }
  return verse;
}

export function osisToEn(osisId: string): string {
  try {
    return osisToEnOriginal("nlt-long", osisId);
  } catch (error) {
    const [book, chapter, verses] = osisId.split(".");
    if (book && chapter && verses) {
      return `${book} ${chapter}:${verses}`;
    } else if (book && chapter) {
      return `${book} ${chapter}`;
    }
    return book;
  }
}
---
