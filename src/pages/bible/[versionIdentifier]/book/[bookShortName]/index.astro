---
import Chapter from "@components/Chapter.astro";
import { loadBibles, findBook, getNameFromBible } from "@utils/bible.astro";
import type { GetStaticPaths, InferGetStaticParamsType } from "astro";
import osisToEn from "bible-reference-formatter";

export const getStaticPaths = (async () => {
  const bibles = await loadBibles();
  return bibles.flatMap((bible) => {
    return bible.osisText.div.map((book) => {
      const bookShortName = book["@_osisID"];
      return {
        params: { bookShortName, versionIdentifier: getNameFromBible(bible) },
      };
    });
  });
}) satisfies GetStaticPaths;

type Params = InferGetStaticParamsType<typeof getStaticPaths>;

const { bookShortName, versionIdentifier } = Astro.params as unknown as Params;

const book = await findBook(versionIdentifier, bookShortName);
const chapters = Array.isArray(book.chapter) ? book.chapter : [book.chapter];
---

<div>
  <h1>{osisToEn("nlt-long", book["@_osisID"])}</h1>
  <nav>
    <h2>Table of Contents</h2>
    <ul>
      {
        chapters.map((chapter) => (
          <li>
            <a href={`#${chapter["@_osisID"]}`}>
              {osisToEn("nlt-long", chapter["@_osisID"])}
            </a>
          </li>
        ))
      }
    </ul>
  </nav>
  <article>
    {
      chapters.map((chapter) => (
        <Chapter versionIdentifier={versionIdentifier} chapter={chapter}>
          <h2 id={chapter["@_osisID"]}>
            <>
              <a href={`#${chapter["@_osisID"]}`}>{"> "}</a>
              <a
                href={`/bible/${versionIdentifier}/book/${bookShortName}/chapter/${
                  chapter["@_osisID"].split(".")[1]
                }`}
              >
                {osisToEn("nlt-long", chapter["@_osisID"])}
              </a>
            </>
          </h2>
        </Chapter>
      ))
    }
  </article>
</div>
